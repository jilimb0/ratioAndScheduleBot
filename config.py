import os
from datetime import time
import asyncio
import logging

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from telegram.ext._utils.types import CCT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –æ—Ç—á–µ—Ç–∞
REPORT_TEXT = 0

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç—å –æ—Ç @BotFather)
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
SCHEDULE = {
    "morning_workout": {"time": time(8, 15), "message": "üèÉ‚Äç‚ôÇÔ∏è –í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ì–æ—Ç–æ–≤ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å—Ç–∞—Ä—Ç—É –¥–Ω—è?", "button_text": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ"},
    "breakfast": {"time": time(9, 0), "message": "üç≥ –í—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞–∫–∞! –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Ç–∞—Ç—å—Å—è.", "button_text": "–ó–∞–≤—Ç—Ä–∞–∫ –≥–æ—Ç–æ–≤ ‚úÖ"},
    "lunch": {"time": time(13, 0), "message": "ü•ó –í—Ä–µ–º—è –æ–±–µ–¥–∞! –ü–æ—Ä–∞ –ø–æ–¥–∫—Ä–µ–ø–∏—Ç—å—Å—è.", "button_text": "–û–±–µ–¥ –≥–æ—Ç–æ–≤ ‚úÖ"},
    "language_study": {"time": time(16, 0), "message": "üìö –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞! –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –∑–∞–Ω—è—Ç–∏—è.", "button_text": "–Ø–∑—ã–∫ –∏–∑—É—á–µ–Ω ‚úÖ"},
    "dinner": {"time": time(19, 0), "message": "üçΩÔ∏è –í—Ä–µ–º—è —É–∂–∏–Ω–∞! –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–Ω—å –≤–∫—É—Å–Ω–æ.", "button_text": "–£–∂–∏–Ω –≥–æ—Ç–æ–≤ ‚úÖ"},
    "daily_report": {"time": time(21, 0), "message": "üìä –í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á—ë—Ç –æ –¥–Ω–µ! –ö–∞–∫ –¥–µ–ª–∞?", "button_text": "–û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤ ‚úÖ"},
}

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC)
TIMEZONE = os.getenv('TIMEZONE', 'UTC')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ—Å—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ)
DATABASE_PATH = "bot_data.db"  # –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ë–î

# –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
MESSAGES = {
    "start": """ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫—É –¥–Ω—è.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /—Å—Ç–∞—Ç—É—Å - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á
‚Ä¢ /–æ—Ç—á–µ—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å
‚Ä¢ /—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö –∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º! üí™
    """,
    "task_completed": "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.",
    "task_already_completed": "‚ÑπÔ∏è –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
    "unknown_message": "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
    "no_tasks_today": "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç –∏–ª–∏ –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!",
    "status_header": "üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
    "report_header": "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å:",
    "schedule_header": "üïê –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á:",
    "task_pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    "task_completed_status": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
    "task_missed": "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ",
    "report_submitted": "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
    "cancel_report": "‚ùå –û—Ç—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω."
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –¥–µ–ø–ª–æ—è)
PORT = int(os.getenv('PORT', 8000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
USE_WEBHOOK = os.getenv('USE_WEBHOOK', 'False').lower() == 'true'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_task_status = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
    await update.message.reply_text(MESSAGES["start"])


async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    today = context.user_data.get('today_date', None) # –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∞—Ç—ã

    if user_id not in user_task_status or today is None or user_task_status[user_id].get(today) is None:
        await update.message.reply_text(MESSAGES["no_tasks_today"])
        return

    status_message = [MESSAGES["status_header"]]
    for task_name, status in user_task_status[user_id][today].items():
        if task_name in SCHEDULE:
            status_message.append(f"‚Ä¢ {SCHEDULE[task_name].get('message', task_name)}: {MESSAGES.get(f'task_{status}', status)}")
    await update.message.reply_text("\n".join(status_message))


async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á."""
    schedule_message = [MESSAGES["schedule_header"]]
    for task_name, details in SCHEDULE.items():
        schedule_message.append(f"‚Ä¢ {task_name}: {details['time'].strftime('%H:%M')}, {details['message']}")
    await update.message.reply_text("\n".join(schedule_message))


async def report_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞."""
    await update.message.reply_text(MESSAGES["report_header"], reply_markup=ReplyKeyboardRemove())
    return REPORT_TEXT


async def report_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞."""
    user_report = update.message.text
    context.user_data['daily_report'] = user_report
    await update.message.reply_text(MESSAGES["report_submitted"])
    return ConversationHandler.END


async def report_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–±–æ—Ä –æ—Ç—á–µ—Ç–∞."""
    await update.message.reply_text(MESSAGES["cancel_report"], reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


async def handle_task_completion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    query = update.callback_query
    await query.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    task_name = query.data
    user_id = query.from_user.id
    today = context.user_data.get('today_date', None) # –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∞—Ç—ã

    if today is None:
        return

    if user_id not in user_task_status:
        user_task_status[user_id] = {today: {}}
    elif today not in user_task_status[user_id]:
        user_task_status[user_id][today] = {}

    if task_name in user_task_status[user_id][today] and user_task_status[user_id][today][task_name] == "completed":
        await query.message.reply_text(MESSAGES["task_already_completed"])
        return

    user_task_status[user_id][today][task_name] = "completed"
    await query.message.reply_text(MESSAGES["task_completed"])


async def send_scheduled_reminders(app: CCT) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    while True:
        now = datetime.now(timezone(TIMEZONE))
        today_str = now.strftime("%Y-%m-%d")
        for task_name, details in SCHEDULE.items():
            if now.hour == details['time'].hour and now.minute == details['time'].minute:
                message = details['message']
                button_text = details['button_text']
                keyboard = [[InlineKeyboardButton(button_text, callback_data=task_name)]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
                # –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
                # –ü—Ä–∏–º–µ—Ä (–Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É):
                # for user_id in get_all_user_ids():
                #     try:
                #         await app.bot.send_message(user_id, message, reply_markup=reply_markup)
                #         # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
                #         if user_id not in user_task_status or today_str not in user_task_status[user_id]:
                #             user_task_status[user_id] = user_task_status.get(user_id, {})
                #             user_task_status[user_id][today_str] = user_task_status[user_id].get(today_str, {})
                #             user_task_status[user_id][today_str][task_name] = "pending"
                #     except Exception as e:
                #         logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


async def post_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å."""
    user_id = update.effective_user.id
    report = context.user_data.get('daily_report', '–û—Ç—á—ë—Ç –Ω–µ –±—ã–ª —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.')
    await update.message.reply_text(f"{MESSAGES['report_header']}\n{report}")


async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("—Å—Ç–∞—Ç—É—Å", status)) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", schedule_command))
    application.add_handler(CommandHandler("–æ—Ç—á–µ—Ç", report_start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç—á–µ—Ç–∞
    report_handler = ConversationHandler(
        entry_points=[CommandHandler('–æ—Ç—á–µ—Ç', report_start)],
        states={
            REPORT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, report_text)],
        },
        fallbacks=[CommandHandler('cancel', report_cancel)],
    )
    application.add_handler(report_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_task_completion))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞)
    application.add_handler(CommandHandler("–ø–æ–∫–∞–∑–∞—Ç—å_–æ—Ç—á–µ—Ç", post_report)) # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_message))

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(send_scheduled_reminders(application))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if USE_WEBHOOK and WEBHOOK_URL:
        await application.bot.set_webhook(WEBHOOK_URL)
        await application.run_webhook(listen="0.0.0.0", port=PORT, webhook_url=WEBHOOK_URL)
    else:
        await application.run_polling()


async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await update.message.reply_text(MESSAGES["unknown_message"])


if __name__ == "__main__":
    asyncio.run(main())