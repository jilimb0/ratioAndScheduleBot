import logging
import random
from telegram.ext import Application
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config import SCHEDULE, MESSAGES  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from database import get_all_active_user_ids, is_task_completed_today, get_today_tasks_status # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ database.py

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler(timezone="Europe/Moscow") # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

# --- –§—É–Ω–∫—Ü–∏–∏-–∑–∞–¥–∞—á–∏ (Jobs) ---

async def send_reminder_job(app: Application, task_key: str):
    """–ó–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    task_config = SCHEDULE.get(task_key)
    if not task_config:
        logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {task_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    logger.info(f"–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: {task_key}")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä—è–º–æ –∏–∑ –ë–î
    user_ids = get_all_active_user_ids()
    if not user_ids:
        logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return

    # 2. –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–¥–∏–Ω —Ä–∞–∑
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton(
            task_config["button_text"],
            callback_data=f"complete_{task_key}"
        )
    ]])

    # 3. –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for user_id in user_ids:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —ç—Ç—É –∑–∞–¥–∞—á—É
        if not is_task_completed_today(user_id, task_key):
            try:
                await app.bot.send_message(
                    chat_id=user_id,
                    text=task_config["message"],
                    reply_markup=keyboard
                )
                await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {task_key} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def send_daily_summary_job(app: Application):
    """–ó–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è —Å–≤–æ–¥–∫—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö."""
    logger.info("–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫.")
    user_ids = get_all_active_user_ids()

    for user_id in user_ids:
        try:
            tasks_status = get_today_tasks_status(user_id)
            completed_tasks = [
                SCHEDULE[key]['button_text'].replace(" ‚úÖ", "")
                for key, done in tasks_status.items() if done
            ]

            if completed_tasks:
                summary = "üåü **–°–≤–æ–¥–∫–∞ –¥–Ω—è:**\n\n"
                summary += "\n".join(f"‚úÖ {name}" for name in completed_tasks)
                summary += f"\n\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: **{len(completed_tasks)}** üí™"
            else:
                summary = "üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –æ—Ç–º–µ—á–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π!"
            
            await app.bot.send_message(chat_id=user_id, text=summary, parse_mode='Markdown')
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def send_motivational_message_job(app: Application):
    """–ó–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    logger.info("–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
    message = random.choice(MESSAGES.get("motivational", []))
    if not message:
        return

    user_ids = get_all_active_user_ids()
    for user_id in user_ids:
        try:
            await app.bot.send_message(chat_id=user_id, text=message)
            await asyncio.sleep(0.1)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º ---

async def start_scheduler(app: Application):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ post_init.
    """
    # 1. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ SCHEDULE
    for task_key, config in SCHEDULE.items():
        task_time = config['time']
        scheduler.add_job(
            send_reminder_job,
            trigger='cron',
            hour=task_time.hour,
            minute=task_time.minute,
            args=[app, task_key],
            id=f"reminder_{task_key}" # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
        )
        logger.info(f"–ó–∞–¥–∞—á–∞-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{task_key}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {task_time.strftime('%H:%M')}.")

    # 2. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏
    scheduler.add_job(send_daily_summary_job, trigger='cron', hour=22, minute=0, args=[app], id="daily_summary")
    logger.info("–ó–∞–¥–∞—á–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 22:00.")

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 10, 14, 18 —á–∞—Å–æ–≤)
    scheduler.add_job(send_motivational_message_job, trigger='cron', hour='10,14,18', minute=5, args=[app], id="motivational")
    logger.info("–ó–∞–¥–∞—á–∞ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 10:05, 14:05, 18:05.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏.")


async def shutdown_scheduler():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞."""
    if scheduler.running:
        scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")