import asyncio
import logging
from datetime import datetime, time, timedelta
from typing import Dict, Set
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from config import SCHEDULE
from database import get_user_stats, update_user_activity

logger = logging.getLogger(__name__)

class TaskScheduler:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.active_users: Set[int] = set()
        self.running = False
        
    def add_user(self, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ"""
        self.active_users.add(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ")
        
    def remove_user(self, user_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö"""
        self.active_users.discard(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        
    async def send_reminder(self, user_id: int, task_key: str, task_config: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    task_config["button_text"], 
                    callback_data=f"complete_{task_key}"
                )]
            ])
            
            await self.bot.send_message(
                chat_id=user_id,
                text=task_config["message"],
                reply_markup=keyboard
            )
            
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {task_key} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {task_key} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            if "blocked" in str(e).lower() or "not found" in str(e).lower():
                self.remove_user(user_id)
                
    async def check_and_send_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        current_time = datetime.now().time()
        
        for task_key, task_config in SCHEDULE.items():
            task_time = task_config["time"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–¥–∞—á–∏ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
            if (current_time.hour == task_time.hour and 
                current_time.minute == task_time.minute):
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for user_id in self.active_users.copy():
                    await self.send_reminder(user_id, task_key, task_config)
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.1)
                
    async def send_daily_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è"""
        try:
            summary_time = time(22, 0)  # 22:00
            current_time = datetime.now().time()
            
            if (current_time.hour == summary_time.hour and 
                current_time.minute == summary_time.minute):
                
                for user_id in self.active_users.copy():
                    try:
                        stats = get_user_stats(user_id, days=1)
                        if stats:
                            today_str = datetime.now().strftime("%Y-%m-%d")
                            today_tasks = stats.get(today_str, [])
                            
                            if today_tasks:
                                summary = "üåü –°–≤–æ–¥–∫–∞ –¥–Ω—è:\n\n"
                                for task in today_tasks:
                                    summary += f"‚úÖ {task['task_name']}\n"
                                summary += f"\nüéØ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {len(today_tasks)}"
                            else:
                                summary = "üìÖ –°–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å. –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üí™"
                                
                            await self.bot.send_message(
                                chat_id=user_id,
                                text=summary
                            )
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫: {e}")
            
    async def scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = True
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                await self.check_and_send_reminders()
                await self.send_daily_summary()
                
                # –û–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(60)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                await asyncio.sleep(60)
                
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None

async def start_scheduler(bot: Bot):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global scheduler
    scheduler = TaskScheduler(bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(scheduler.scheduler_loop())
    
def get_scheduler() -> TaskScheduler:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global scheduler
    return scheduler

async def send_motivational_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    motivational_messages = [
        "üí™ –ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
        "üåü –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!",
        "üéØ –¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–¥—Ç–∏ –∫ —Ü–µ–ª–∏!",
        "üöÄ –£—Å–ø–µ—Ö - —ç—Ç–æ —Å—É–º–º–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å!",
        "‚≠ê –ë—É–¥—å —Ç–µ—Ä–ø–µ–ª–∏–≤ —Å —Å–æ–±–æ–π. –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏!",
    ]
    
    import random
    message = random.choice(motivational_messages)
    
    if scheduler:
        for user_id in scheduler.active_users.copy():
            try:
                await scheduler.bot.send_message(
                    chat_id=user_id,
                    text=message
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
async def schedule_motivational_messages():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    import random
    
    while True:
        # –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç 2 –¥–æ 6 —á–∞—Å–æ–≤
        wait_time = random.randint(2*3600, 6*3600)
        await asyncio.sleep(wait_time)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00 - 20:00)
        current_hour = datetime.now().hour
        if 9 <= current_hour <= 20:
            await send_motivational_message()