import logging
from datetime import datetime, date
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackContext
from database import (
    register_user, update_user_activity, mark_task_completed, 
    get_today_tasks_status, get_user_stats, get_completion_rate,
    is_task_completed_today
)
from scheduler import get_scheduler
from config import SCHEDULE, MESSAGES

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = [
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üìã –û—Ç—á—ë—Ç")],
        [KeyboardButton("üïê –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        user_id = user.id
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        register_user(user_id, user.username, user.first_name, user.last_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler = get_scheduler()
        if scheduler:
            scheduler.add_user(user_id)
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            MESSAGES["start"],
            reply_markup=get_main_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /—Å—Ç–∞—Ç—É—Å"""
    try:
        user_id = update.effective_user.id
        update_user_activity(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        tasks_status = get_today_tasks_status(user_id)
        
        if not tasks_status:
            await update.message.reply_text(MESSAGES["no_tasks_today"])
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        status_text = MESSAGES["status_header"] + "\n\n"
        
        for task_key, is_completed in tasks_status.items():
            if task_key in SCHEDULE:
                task_name = SCHEDULE[task_key]["button_text"].replace(" ‚úÖ", "")
                task_time = SCHEDULE[task_key]["time"].strftime("%H:%M")
                
                status_icon = "‚úÖ" if is_completed else "‚è≥"
                status_text += f"{status_icon} {task_time} - {task_name}\n"
                
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        completion_rate = get_completion_rate(user_id, days=7)
        status_text += f"\nüìà –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: {completion_rate:.1f}%"
        
        await update.message.reply_text(status_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ status_handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")

async def report_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–æ—Ç—á—ë—Ç"""
    try:
        user_id = update.effective_user.id
        update_user_activity(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        stats = get_user_stats(user_id, days=7)
        
        if not stats:
            await update.message.reply_text("üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
            return
            
        report_text = MESSAGES["report_header"] + "\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        sorted_dates = sorted(stats.keys(), reverse=True)
        
        for date_str in sorted_dates[:7]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            tasks = stats[date_str]
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
            formatted_date = date_obj.strftime("%d.%m.%Y")
            
            if date_obj.date() == date.today():
                formatted_date += " (—Å–µ–≥–æ–¥–Ω—è)"
            elif date_obj.date() == date.today() - timedelta(days=1):
                formatted_date += " (–≤—á–µ—Ä–∞)"
                
            report_text += f"üìÖ {formatted_date}:\n"
            
            for task in tasks:
                task_name = task['task_name'].replace(" ‚úÖ", "")
                report_text += f"  ‚úÖ {task_name}\n"
                
            report_text += "\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        completion_rate = get_completion_rate(user_id, days=7)
        report_text += f"üìä –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {completion_rate:.1f}%"
        
        await update.message.reply_text(report_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ report_handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.")

async def schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        user_id = update.effective_user.id
        update_user_activity(user_id)
        
        schedule_text = MESSAGES["schedule_header"] + "\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_tasks = sorted(SCHEDULE.items(), key=lambda x: x[1]["time"])
        
        for task_key, task_config in sorted_tasks:
            task_time = task_config["time"].strftime("%H:%M")
            task_name = task_config["button_text"].replace(" ‚úÖ", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —Å–µ–≥–æ–¥–Ω—è
            is_completed = is_task_completed_today(user_id, task_key)
            status_icon = "‚úÖ" if is_completed else "‚è∞"
            
            schedule_text += f"{status_icon} {task_time} - {task_name}\n"
            
        await update.message.reply_text(schedule_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule_handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        update_user_activity(user_id)
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        if query.data.startswith("complete_"):
            task_key = query.data.replace("complete_", "")
            
            if task_key in SCHEDULE:
                task_config = SCHEDULE[task_key]
                task_name = task_config["button_text"]
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                if mark_task_completed(user_id, task_key, task_name):
                    await query.edit_message_text(
                        text=f"{task_config['message']}\n\n{MESSAGES['task_completed']}"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    motivational_messages = [
                        "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
                        "üí™ –¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                        "‚≠ê –°—É–ø–µ—Ä! –ï—â–µ –æ–¥–∏–Ω —à–∞–≥ –∫ —Ü–µ–ª–∏!",
                        "üöÄ –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!",
                        "üåü –ë—Ä–∞–≤–æ! –ö–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–ª–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —É—Å–ø–µ—Ö—É!"
                    ]
                    
                    import random
                    motivation = random.choice(motivational_messages)
                    await context.bot.send_message(chat_id=user_id, text=motivation)
                    
                else:
                    await query.edit_message_text(
                        text=f"{task_config['message']}\n\n{MESSAGES['task_already_completed']}"
                    )
                    
            else:
                await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞.")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è.")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = update.effective_user.id
        message_text = update.message.text.lower()
        update_user_activity(user_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if message_text in ["üìä —Å—Ç–∞—Ç—É—Å", "—Å—Ç–∞—Ç—É—Å"]:
            await status_handler(update, context)
            return
            
        elif message_text in ["üìã –æ—Ç—á—ë—Ç", "–æ—Ç—á—ë—Ç"]:
            await report_handler(update, context)
            return
            
        elif message_text in ["üïê —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]:
            await schedule_handler(update, context)
            return
            
        elif message_text in ["‚ÑπÔ∏è –ø–æ–º–æ—â—å", "–ø–æ–º–æ—â—å"]:
            await start_handler(update, context)
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á
        task_keywords = {
            "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞": "morning_workout",
            "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É": "morning_workout",
            "–∑–∞—Ä—è–¥–∫–∞": "morning_workout",
            "–∑–∞–≤—Ç—Ä–∞–∫": "breakfast",
            "–ø–æ–µ–ª": "breakfast",
            "–∑–∞–≤—Ç—Ä–∞–∫–∞–ª": "breakfast",
            "–æ–±–µ–¥": "lunch",
            "–ø–æ–æ–±–µ–¥–∞–ª": "lunch",
            "—è–∑—ã–∫": "language_study",
            "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "language_study",
            "–∏–∑—É—á–µ–Ω–∏–µ": "language_study",
            "—É–∂–∏–Ω": "dinner",
            "–ø–æ—É–∂–∏–Ω–∞–ª": "dinner",
            "–æ—Ç—á—ë—Ç": "daily_report",
            "–æ—Ç—á–µ—Ç": "daily_report",
            "–¥–æ–∫–ª–∞–¥": "daily_report"
        }
        
        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for keyword, task_key in task_keywords.items():
            if keyword in message_text:
                if any(word in message_text for word in ["—Å–¥–µ–ª–∞–ª", "–≤—ã–ø–æ–ª–Ω–∏–ª", "–≥–æ—Ç–æ–≤", "—Å–¥–µ–ª–∞–Ω–∞", "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞"]):
                    if task_key in SCHEDULE:
                        task_config = SCHEDULE[task_key]
                        task_name = task_config["button_text"]
                        
                        if mark_task_completed(user_id, task_key, task_name):
                            await update.message.reply_text(
                                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! {task_name.replace(' ‚úÖ', '')} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!"
                            )
                        else:
                            await update.message.reply_text(
                                f"‚ÑπÔ∏è {task_name.replace(' ‚úÖ', '')} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è."
                            )
                        return
                        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            MESSAGES["unknown_message"],
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ message_handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")