import logging
import random
from datetime import datetime, date, timedelta

from telegram import Update
from telegram.ext import ContextTypes
from telegram import ReplyKeyboardMarkup, KeyboardButton

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
from database import (
    register_user,
    update_user_activity,
    mark_task_completed,
    get_today_tasks_status,
    get_user_stats,
    get_completion_rate,
    is_task_completed_today,
)
from config import SCHEDULE, MESSAGES

logger = logging.getLogger(__name__)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üìà –û—Ç—á—ë—Ç")],
        [KeyboardButton("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'."""
    user = update.effective_user
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        register_user(user_id=user.id, username=user.username, first_name=user.first_name)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

        await update.message.reply_text(
            MESSAGES.get("start", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"),
            reply_markup=get_main_keyboard(),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler –¥–ª—è user_id {user.id}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    user = update.effective_user
    try:
        update_user_activity(user.id)
        tasks_status = get_today_tasks_status(user.id)

        if not tasks_status:
            await update.message.reply_text(MESSAGES.get("no_tasks_today", "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç."))
            return

        status_lines = [MESSAGES.get("status_header", "–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")]
        for task_key, is_completed in tasks_status.items():
            task_config = SCHEDULE.get(task_key)
            if task_config:
                task_name = task_config.get("button_text", task_key).replace(" ‚úÖ", "")
                task_time = task_config.get("time").strftime("%H:%M")
                status_icon = "‚úÖ" if is_completed else "‚è≥"
                status_lines.append(f"{status_icon} {task_time} - {task_name}")

        completion_rate = get_completion_rate(user.id, days=7)
        status_lines.append(f"\nüìà –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: {completion_rate:.1f}%")

        await update.message.reply_text("\n".join(status_lines))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ status_handler –¥–ª—è user_id {user.id}: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def report_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é."""
    user = update.effective_user
    try:
        update_user_activity(user.id)
        stats = get_user_stats(user.id, days=7)

        if not stats:
            await update.message.reply_text("üìä –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ –Ω–µ—Ç.")
            return

        report_lines = [MESSAGES.get("report_header", "–û—Ç—á—ë—Ç –∑–∞ 7 –¥–Ω–µ–π:")]
        sorted_dates = sorted(stats.keys(), reverse=True)

        for date_str in sorted_dates:
            tasks = stats[date_str]
            date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
            
            day_label = ""
            if date_obj == date.today():
                day_label = " (—Å–µ–≥–æ–¥–Ω—è)"
            elif date_obj == date.today() - timedelta(days=1):
                day_label = " (–≤—á–µ—Ä–∞)"
            
            report_lines.append(f"\nüìÖ {date_obj.strftime('%d.%m.%Y')}{day_label}:")
            for task in tasks:
                task_name = task.get('task_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞').replace(" ‚úÖ", "")
                report_lines.append(f"  ‚úÖ {task_name}")

        completion_rate = get_completion_rate(user.id, days=7)
        report_lines.append(f"\n\nüìä –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {completion_rate:.1f}%")

        await update.message.reply_text("\n".join(report_lines))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ report_handler –¥–ª—è user_id {user.id}: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç.")


async def schedule_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á."""
    user = update.effective_user
    try:
        update_user_activity(user.id)
        schedule_lines = [MESSAGES.get("schedule_header", "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")]
        
        sorted_tasks = sorted(SCHEDULE.items(), key=lambda item: item[1].get("time"))

        for task_key, task_config in sorted_tasks:
            task_time = task_config.get("time").strftime("%H:%M")
            task_name = task_config.get("button_text", task_key).replace(" ‚úÖ", "")
            is_completed = is_task_completed_today(user.id, task_key)
            status_icon = "‚úÖ" if is_completed else "‚è∞"
            schedule_lines.append(f"{status_icon} {task_time} - {task_name}")

        await update.message.reply_text("\n".join(schedule_lines))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ schedule_handler –¥–ª—è user_id {user.id}: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í—ã–ø–æ–ª–Ω–∏—Ç—å')."""
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ callback'–∞

    user = query.from_user
    task_key = query.data.replace("complete_", "")
    
    try:
        update_user_activity(user.id)
        task_config = SCHEDULE.get(task_key)

        if not task_config:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        task_name = task_config.get("button_text", "–ó–∞–¥–∞—á–∞")
        if mark_task_completed(user.id, task_key, task_name):
            await query.edit_message_text(
                f"{task_config.get('message', '')}\n\n{MESSAGES.get('task_completed', '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')}"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            motivational_message = random.choice(MESSAGES.get("motivational", ["–û—Ç–ª–∏—á–Ω–æ!"]))
            await context.bot.send_message(chat_id=user.id, text=motivational_message)
        else:
            await query.edit_message_text(
                f"{task_config.get('message', '')}\n\n{MESSAGES.get('task_already_completed', '–ó–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler –¥–ª—è user_id {user.id} –∏ task_key {task_key}: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è.")


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ Reply-–∫–Ω–æ–ø–∫–∏."""
    user = update.effective_user
    text = update.message.text.lower().strip()

    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    clean_text = text.replace("üìä ", "").replace("üìà ", "").replace("üóì ", "").replace("‚ÑπÔ∏è ", "")

    try:
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if clean_text == "—Å—Ç–∞—Ç—É—Å":
            await status_handler(update, context)
        elif clean_text == "–æ—Ç—á—ë—Ç":
            await report_handler(update, context)
        elif clean_text == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            await schedule_handler(update, context)
        elif clean_text == "–ø–æ–º–æ—â—å":
            await start_handler(update, context)
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –∫–Ω–æ–ø–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            await update.message.reply_text(
                MESSAGES.get("unknown_message", "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é."),
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ message_handler –¥–ª—è user_id {user.id} —Å —Ç–µ–∫—Å—Ç–æ–º '{text}': {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")